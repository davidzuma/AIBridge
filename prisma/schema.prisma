// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "reviewer"
  isPremium     Boolean   @default(false) // Premium subscription status
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id              String         @id @default(cuid())
  userId          String
  content         String
  response        String         @default("Thanks for your query, we will review it soon")
  sources         String?        // JSON string of source URLs
  classification  String?        // Domain classification (Tax, Legal, Accounting)
  status          String         @default("pending") // "pending", "ai_responded", "validated", "review_required"
  reviewerComment String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  files           ChatFile[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatFile {
  id          String   @id @default(cuid())
  chatId      String
  fileName    String
  originalName String
  mimeType    String
  size        Int
  filePath    String
  createdAt   DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ReviewerApplication {
  id                    String   @id @default(cuid())
  userEmail             String   @unique
  userName              String
  professionalTitle     String
  licenseNumber         String
  specialization        String
  experience            String
  phone                 String?
  linkedin              String?
  bio                   String
  certificationFilePath String
  status                String   @default("pending") // "pending", "approved", "rejected"
  reviewNotes           String?
  submittedAt           DateTime @default(now())
  reviewedAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
